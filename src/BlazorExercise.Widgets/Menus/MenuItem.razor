<li class="menuitem @CssClass_Expanded @CssClass_WithChildMenus level-@MenuLevel"
	onmouseover="@OnMouseOver"
	onmouseout="@OnMouseOut"
	onclick="@OnClickInternal">

	<span class="text">@Text</span>

	@if (ChildContent is not null)
	{
		<CascadingValue Value="@this">
			<div class="content">@ChildContent</div>
		</CascadingValue>
	}
</li>

@code {
	[Parameter]
	public required string Text { get; set; }

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[CascadingParameter(Name = MenuUtils.PropertyNames.MenuLevel)]
	public required int MenuLevel { get; init; }

	[Parameter]
	public EventCallback<MenuItemClickEventArgs> OnClick { get; set; }

	private async Task OnClickInternal(MouseEventArgs mouseArgs)
		=> await OnClick.InvokeAsync(new() { MouseEventArgs = mouseArgs, Sender = this });

	#region Moue Hover Handling
	private string CssClass_Expanded => _isExpanded ? "expanded" : "";
	private bool _isExpanded = false;

	void OnMouseOver(MouseEventArgs e)
	{
		// Console.WriteLine($"++ {Text}");
		_isExpanded = true;
		StateHasChanged();
	}

	void OnMouseOut(MouseEventArgs e)
	{
		// Console.WriteLine($"-- {Text}");
		_isExpanded = false;
		StateHasChanged();
	}
	#endregion

	#region Menu Nesting
	private string CssClass_WithChildMenus => HasInitializedSubMenus ? "with-child-menus" : "";

	private bool _hasInitializedSubMenus = false;

	public bool HasInitializedSubMenus
	{
		get => _hasInitializedSubMenus;
		internal set { this._hasInitializedSubMenus = value; StateHasChanged(); }
	}
	#endregion
}